TARFILES = Makefile scanner.mll parser.mly ast.mli exc.mli common.ml traverse.ml docs/*.tex

OBJS = exc.cmo scoping.ml common.cmo parser.cmo scanner.cmo

TEXS = docs/towel.grammar.def.tex docs/towel.proposal.1.tex

all: traverse tokens

docs: $(TEXS)
	xelatex $(TEXS) -shell-escape -interaction=nonstopmode \
-output-directory=docs
	xelatex $(TEXS) -shell-escape -interaction=nonstopmode \
-output-directory=docs

asm : $(OBJS)
	ocamlc -c asm.ml
	ocamlc -o compile str.cma $(OBJS) asm.cmo

traverse : $(OBJS)
	ocamlc -c traverse.ml
	ocamlc -o traverse str.cma $(OBJS) traverse.cmo

tokens : $(OBJS)
	ocamlc -c tokens.ml
	ocamlc -o tokens str.cma $(OBJS) tokens.cmo

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	menhir parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

towel.tar.gz : $(TARFILES)
	cd .. && tar zcf Towel/towel.tar.gz $(TARFILES:%=Towel/%)

.PHONY : clean
clean :
	rm -f traverse tokens \
parser.ml parser.mli scanner.ml *.cmo *.cmi \
*.automaton *.conflicts *.gz \
docs/*.pdf docs/*.toc docs/*.aux docs/*.log docs/*.out

# Generated by ocamldep *.ml *.mli
asm.cmo :
asm.cmx :
common.cmo : ast.cmi
common.cmx : ast.cmi
exc.cmo :
exc.cmx :
parser.cmo : exc.cmo common.cmo ast.cmi parser.cmi
parser.cmx : exc.cmx common.cmx ast.cmi parser.cmi
scanner.cmo : parser.cmi exc.cmo common.cmo ast.cmi
scanner.cmx : parser.cmx exc.cmx common.cmx ast.cmi
scoping.cmo : exc.cmo ast.cmi
scoping.cmx : exc.cmx ast.cmi
tokens.cmo : scanner.cmo parser.cmi common.cmo
tokens.cmx : scanner.cmx parser.cmx common.cmx
traverse.cmo : scanner.cmo parser.cmi exc.cmo common.cmo ast.cmi
traverse.cmx : scanner.cmx parser.cmx exc.cmx common.cmx ast.cmi
typer.cmo : scoping.cmo ast.cmi
typer.cmx : scoping.cmx ast.cmi
ast.cmi :
parser.cmi : ast.cmi
